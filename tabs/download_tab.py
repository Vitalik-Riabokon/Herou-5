# tabs/download_tab.py
# -*- coding: utf-8 -*-

import os
import re

import gdown
import requests
import zipfile
import shutil
import tempfile
from time import time

from PySide6.QtCore import (QThread, Signal, QSettings, QTimer,
                            Qt, QEvent, QUrl)
from PySide6.QtGui import QDesktopServices, QRegion
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton,
    QFileDialog, QProgressBar, QTextEdit, QComboBox, QMessageBox, QDialog,
    QPlainTextEdit, QGridLayout, QDialogButtonBox
)

import dotenv
dotenv.load_dotenv()

# ------------------------------------------------------
# 1) –ú–∞–ø–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
# ------------------------------------------------------
INSTALL_MAP = {
    "Universe_mod": {
        "bin":  ["H5_Universe.exe"],
        "data": ["Universe_mod.pak"]
    },
    "H5AI_31": {
        "bin":  ["H5_AIadv_31j.exe", "H5_AIProcess_31j.exe"],
        "data": ["EE_options.pak", "EE_options_text.pak"]
    },
    "Maps": {
        "Maps": ["*"]
    }
}

# ------------------------------------------------------
# 2) –î–∂–µ—Ä–µ–ª–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
# ------------------------------------------------------
DOWNLOAD_SOURCES = {
    "Universe_mod": {
        "type": "git",
        "repo": "Vitalik-Riabokon/Herou-5",
        "file": "Universe_mod 1.3.zip"
    },
    "H5AI_31": {
        "type": "gdrive",
        "id": "1F2s-Ebm80JBj7OOsce3E-cqLJGyzpu2d"
    },
    "Tribes of the East": {
        "type": "gdrive",
        "id": "1UMXa_c6k5AGReDUNXDh3p5toxHsWnizG"
    },
    "CheatEngine": {
        "type": "gdrive",
        "id": "1b-stAqvS8NoqEf4wCD3EMKaYiJzLGfzm"
    },
    "Maps": {
        "type": "gdrive",
        "id": "1SaXQI64JkTp_6_gqqc0Lk95ZnJODuy0h"
    }
}

# ------------------------------------------------------
# 3) –§—É–Ω–∫—Ü—ñ—è –¥–ª—è GitHub (–ø—Ä–∏–≤–∞—Ç–Ω–µ/–ø—É–±–ª—ñ—á–Ω–µ —Ä–µ–ø–æ)
# ------------------------------------------------------
def github_download(repo: str, filepath: str, dest: str):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É –∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ (–∞–±–æ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ) —Ä–µ–ø–æ GitHub —á–µ—Ä–µ–∑ API."""
    token = os.getenv("GITHUB_TOKEN")
    if not token:
        raise RuntimeError("Set GITHUB_TOKEN environment variable")

    url_api = f"https://api.github.com/repos/{repo}/contents/{filepath}"
    headers = {"Authorization": f"token {token}"}
    r = requests.get(url_api, headers=headers)
    if r.status_code != 200:
        raise RuntimeError(f"GitHub API {r.status_code}: {r.text}")

    download_url = r.json().get("download_url")
    if not download_url:
        raise RuntimeError("No download_url in API response")

    resp = requests.get(download_url, headers=headers, stream=True)
    resp.raise_for_status()
    with open(dest, "wb") as f:
        for chunk in resp.iter_content(32768):
            if chunk:
                f.write(chunk)

# ------------------------------------------------------
# 4) –í–æ—Ä–∫–µ—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (Git / GDrive / –ü—Ä—è–º–∏–π)
# ------------------------------------------------------
class DownloadWorker(QThread):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è –ø—Ä—è–º–æ–≥–æ URL (–∞–ª–µ –Ω–µ GDrive –≤–µ–ª–∏–∫–∏—Ö —Ñ–∞–π–ª—ñ–≤)."""
    progressChanged = Signal(int)
    statusMessage   = Signal(str)
    finishedSignal  = Signal(str)

    def __init__(self, url: str, out_path: str):
        super().__init__()
        self.url = url
        self.out_path = out_path

    def run(self):
        t0 = time()
        self.statusMessage.emit(f"‚ö° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {self.url}")
        r = requests.get(self.url, stream=True)
        if r.status_code != 200:
            self.finishedSignal.emit(f"‚ùå HTTP {r.status_code}")
            return

        total = int(r.headers.get("Content-Length", 0))
        done = 0
        with open(self.out_path, "wb") as f:
            for chunk in r.iter_content(32768):
                if not chunk:
                    continue
                f.write(chunk)
                done += len(chunk)
                if total:
                    prog = int(done*100/total)
                    self.progressChanged.emit(prog)

        dt = time() - t0
        mb = done/1024/1024
        self.finishedSignal.emit(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {mb:.2f}MB –∑–∞ {dt:.1f}—Å")


class GitDownloadWorker(QThread):
    """–í–æ—Ä–∫e—Ä –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑ GitHub (–ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ/–ø—É–±–ª—ñ—á–Ω–æ–≥–æ —Ä–µ–ø–æ)."""
    progressChanged = Signal(int)
    statusMessage   = Signal(str)
    finishedSignal  = Signal(str)

    def __init__(self, repo: str, filepath: str, out_path: str):
        super().__init__()
        self.repo = repo
        self.filepath = filepath
        self.out_path = out_path

    def run(self):
        try:
            self.statusMessage.emit(f"‚ö° GitHub: {self.repo}/{self.filepath}")
            github_download(self.repo, self.filepath, self.out_path)
            self.finishedSignal.emit("‚úÖ GitHub —Ñ–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ")
        except Exception as ex:
            self.finishedSignal.emit(f"‚ùå GitHub download failed: {ex}")


import subprocess
import re

class GDriveDownloadWorker(QThread):
    """–í–æ—Ä–∫e—Ä –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è Google Drive —á–µ—Ä–µ–∑ gdown –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –ø—Ä–æ–≥—Ä–µ—Å—É."""
    progressChanged = Signal(int)
    statusMessage  = Signal(str)
    finishedSignal = Signal(str)

    def __init__(self, file_id: str, out_path: str):
        super().__init__()
        self.file_id = file_id
        self.out_path = out_path

    def run(self):
        url = f"https://drive.google.com/uc?id={self.file_id}"
        self.statusMessage.emit("‚ö° –ó–∞–ø—É—Å–∫ gdown‚Ä¶")
        # –§–æ—Ä–º—É—î–º–æ –∫–æ–º–∞–Ω–¥—É
        cmd = ["gdown", url, "-O", self.out_path]
        try:
            proc = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1
            )
        except FileNotFoundError:
            return self.finishedSignal.emit("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ gdown. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ —á–µ—Ä–µ–∑ pip install gdown")

        pattern = re.compile(r"\s*(\d+)%\s+([\d\.]+[KMG]?B/s)")

        # –ß–∏—Ç–∞—î–º–æ stdout —Ä—è–¥–æ–∫ –∑–∞ —Ä—è–¥–∫–æ–º
        for line in proc.stdout:
            line = line.strip()
            # –ï–º—ñ–º–æ –±—É–¥—å‚Äë—è–∫—ñ —Å—Ç–∞—Ç—É—Å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            self.statusMessage.emit(line)
            # –®—É–∫–∞—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            m = pattern.search(line)
            if m:
                pct = int(m.group(1))
                speed = m.group(2)
                self.progressChanged.emit(pct)
                # –î–æ–¥–∞—Ç–∫–æ–≤–æ –ø–æ–∫–∞–∑—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å
                self.statusMessage.emit(f"üöÄ {speed}")
        proc.wait()

        if proc.returncode == 0:
            self.progressChanged.emit(100)
            self.finishedSignal.emit(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {self.out_path}")
        else:
            self.finishedSignal.emit(f"‚ùå gdown –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º {proc.returncode}")



# ------------------------------------------------------
# 5) –ö–ª–∞—Å –≤–∫–ª–∞–¥–∫–∏ DownloadTab, —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ—ó –≤ main.py
# ------------------------------------------------------
class DownloadTab(QWidget):
    """
    –í–∫–ª–∞–¥–∫–∞ ¬´Download¬ª –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:
    - –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ ZIP (Google Drive, GitHub) –≤ –æ–±—Ä–∞–Ω—É —Ç–µ–∫—É
    - –í–∏–±—ñ—Ä –∫–æ—Ä–µ–Ω—è –≥—Ä–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è (–∑–∞ INSTALL_MAP)
    - –ö—ñ–±–µ—Ä–ø–∞–Ω–∫-—Å—Ç–∏–ª—å, –ø—ñ–¥–∫–∞–∑–∫–∏, –ª–æ–≥, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —à–ª—è—Ö—ñ–≤
    - –ö–Ω–æ–ø–∫–∞ ¬´–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É –∑ ZIP¬ª + –∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤–Ω–∏–π –ª–æ–≥¬ª.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.worker = None
        # QSettings –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—ñ–≤
        self.settings = QSettings("download_tab_settings.ini", QSettings.IniFormat)

        # ----------- UI -----------
        self.initUi()
        self.applyCyberpunkStyle()
        self.initHoverHighlight()

        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ç–µ–∫—É ZIP —ñ —Ç–µ–∫—É –≥—Ä–∏
        self.loadPathsFromSettings()

    # -----------------------
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è UI
    # -----------------------
    def initUi(self):
        main_layout = QVBoxLayout(self)
        self.setLayout(main_layout)

        # 1) –ö–æ–º–±–æ–±–æ–∫—Å —ñ–∑ –ø—É–Ω–∫—Ç–∞–º–∏ (DOWNLOAD_SOURCES)
        self.comboTargets = QComboBox()
        self.comboTargets.addItems(DOWNLOAD_SOURCES.keys())
        self.comboTargets.setToolTip("–û–±–µ—Ä—ñ—Ç—å, —â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ (Google Drive —á–∏ GitHub)")

        # 2) –¢–µ–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ZIP
        row_save = QHBoxLayout()
        lbl_save = QLabel("–¢–µ–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ZIP:")
        self.edtSave = QLineEdit()
        self.edtSave.setToolTip("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–∫—É, –∫—É–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –∞—Ä—Ö—ñ–≤ .zip")
        btn_browse_save = QPushButton("–û–≥–ª—è–¥")
        btn_browse_save.setToolTip("–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É —Ç–µ–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
        btn_browse_save.clicked.connect(self.chooseSaveDir)
        row_save.addWidget(lbl_save)
        row_save.addWidget(self.edtSave)
        row_save.addWidget(btn_browse_save)

        # 3) –ö–Ω–æ–ø–∫–∞ ¬´–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏¬ª
        self.btnDownload = QPushButton("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏")
        self.btnDownload.setToolTip("–ü–æ—á–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ ZIP")
        self.btnDownload.clicked.connect(self.onDownload)

        # 4) –ü—Ä–æ–≥—Ä–µ—Å–±–∞—Ä + —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ª–æ–≥
        self.prg = QProgressBar()
        self.txtLog = QTextEdit()
        self.txtLog.setReadOnly(True)

        # 5) –¢–µ–∫–∞ –≥—Ä–∏ + –∫–Ω–æ–ø–∫–∞
        row_hero = QHBoxLayout()
        lbl_hero = QLabel("üó∫ –ü–∞–ø–∫–∞ –≥—Ä–∏:")
        self.edtHeroRoot = QLineEdit()
        self.edtHeroRoot.setToolTip("–í–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É Heroes V (bin, data, Maps).")
        btn_hero = QPushButton("–û–≥–ª—è–¥")
        btn_hero.setToolTip("–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É –≥—Ä–∏.")
        btn_hero.clicked.connect(lambda: self.chooseFolder(self.edtHeroRoot))
        row_hero.addWidget(lbl_hero)
        row_hero.addWidget(self.edtHeroRoot)
        row_hero.addWidget(btn_hero)

        # 6) –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤–∏–±–æ—Ä—É ZIP (Universe_mod / H5AI_31 / Maps), —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏
        self.comboInstall = QComboBox()
        self.comboInstall.addItems(INSTALL_MAP.keys())
        self.comboInstall.setToolTip("–í–∏–±–µ—Ä—ñ—Ç—å –∞—Ä—Ö—ñ–≤ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–≤–∏–Ω–Ω—ñ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π ZIP).")

        # 7) –ö–Ω–æ–ø–∫–∞ ¬´Install ZIP¬ª
        btnInstall = QPushButton("‚úÖ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ZIP")
        btnInstall.setToolTip("–†–æ–∑–ø–∞–∫—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω–∏–π ZIP —É –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É –≥—Ä–∏.")
        btnInstall.clicked.connect(self.onInstall)

        # 8) –ö–Ω–æ–ø–∫–∞ ¬´–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É –∑ ZIP¬ª
        self.btnOpenFolder = QPushButton("üìÇ –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É –∑ ZIP")
        self.btnOpenFolder.setToolTip("–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–∫—É, –¥–µ –ª–µ–∂–∏—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π ZIP.")
        self.btnOpenFolder.setVisible(False)  # —Å—Ç–∞–Ω–µ –≤–∏–¥–∏–º–æ—é –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        self.btnOpenFolder.clicked.connect(self.openZipFolder)

        # 9) –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤–Ω–∏–π –ª–æ–≥¬ª
        self.btnShowFullLog = QPushButton("üìù –ü–æ–≤–Ω–∏–π –ª–æ–≥")
        self.btnShowFullLog.setToolTip("–í—ñ–¥–∫—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º–µ –≤—ñ–∫–Ω–æ —ñ–∑ —É—Å—ñ–º–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –ª–æ–≥—É.")
        self.btnShowFullLog.clicked.connect(self.showFullLogDialog)

        # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è
        main_layout.addWidget(self.comboTargets)
        main_layout.addLayout(row_save)
        main_layout.addWidget(self.btnDownload)
        main_layout.addWidget(self.prg)
        main_layout.addWidget(self.txtLog, stretch=1)
        main_layout.addLayout(row_hero)
        main_layout.addWidget(self.comboInstall)
        main_layout.addWidget(btnInstall)

        row_extras = QHBoxLayout()
        row_extras.addWidget(self.btnOpenFolder)
        row_extras.addWidget(self.btnShowFullLog)
        row_extras.addStretch(1)
        main_layout.addLayout(row_extras)

    # -----------------------
    # –°—Ç–∏–ª—å –∫—ñ–±–µ—Ä–ø–∞–Ω–∫
    # -----------------------
    def applyCyberpunkStyle(self):
        self.setStyleSheet("""
            QWidget {
                background-color: #242424;
                color: #A8FFC4;
                font-family: Consolas, Segoe UI, Arial;
                font-size: 10pt;
            }
            QLineEdit, QComboBox, QTextEdit {
                background-color: #2E2E2E;
                border: 1px solid #444;
                color: #C4FFE4;
            }
            QPushButton {
                background-color: #3A3A3A;
                border: 1px solid #5EECCB;
                padding: 5px 10px;
                margin: 2px;
            }
            QPushButton:hover {
                background-color: #4A4A4A;
            }
            QProgressBar {
                text-align: center;
                background-color: #2A2A2A;
                border: 1px solid #444;
            }
            QProgressBar::chunk {
                background-color: #00FFC8;
            }
            QToolTip {
                background-color: #2A2A2A;
                color: #A8FFC4;
                border: 1px solid #00FFC8;
            }
        """)

    # -----------------------
    # –•–æ–≤–µ—Ä-—Ö–∞–π–ª–∞–π—Ç
    # -----------------------
    def initHoverHighlight(self):
        """–Ø–∫—â–æ 5—Å —Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ –æ–¥–Ω–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ ‚Äî –∑–∞—Ç–µ–º–Ω—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –ø—ñ–¥—Å–≤—ñ—á—É—î–º–æ —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç."""
        self.overlay = QWidget(self)
        self.overlay.hide()
        self.overlay.setStyleSheet("background-color: rgba(0,0,0,150);")
        self.overlay.setAttribute(Qt.WA_TransparentForMouseEvents, True)

        self.hoverTimer = QTimer(self)
        self.hoverTimer.setSingleShot(True)
        self.hoverTimer.timeout.connect(self.onHoverTimeout)
        self.hoverTarget = None

        # –í—Å—Ç–∞–Ω–æ–≤–∏–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ–¥—ñ–π –Ω–∞ –≤—Å—ñ —Å—É—Ç—Ç—î–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        for w in self.findChildren(QWidget):
            if w is not self.overlay and w is not self:
                w.installEventFilter(self)

    def eventFilter(self, obj, event):
        if event.type() == QEvent.Enter:
            self.hoverTarget = obj
            self.hoverTimer.start(5000)
        elif event.type() == QEvent.Leave:
            self.hoverTimer.stop()
            self.overlay.hide()
            self.hoverTarget = None
        return super().eventFilter(obj, event)

    def onHoverTimeout(self):
        if not self.hoverTarget:
            return
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ—Ä–∫—É —É –Ω–∞–∫–ª–∞–¥—Ü—ñ, –¥–µ –µ–ª–µ–º–µ–Ω—Ç
        rect = self.hoverTarget.geometry()
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ DownloadTab
        topLeft = self.hoverTarget.mapTo(self, rect.topLeft())
        myRect = rect.translated(topLeft)
        region = QRegion(self.rect())
        region_hole = QRegion(myRect)
        final_mask = region.subtracted(region_hole)
        self.overlay.setGeometry(self.rect())
        self.overlay.setMask(final_mask)
        self.overlay.raise_()
        self.overlay.show()

    def resizeEvent(self, event):
        super().resizeEvent(event)
        if self.overlay.isVisible():
            # –ü—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–æ–∂–µ–Ω–Ω—è overlay
            self.overlay.setGeometry(self.rect())

    # -----------------------
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—ñ–≤
    # -----------------------
    def loadPathsFromSettings(self):
        save_dir = self.settings.value("save_dir", "")
        game_dir = self.settings.value("game_dir", "")
        if save_dir:
            self.edtSave.setText(save_dir)
        if game_dir:
            self.edtHeroRoot.setText(game_dir)

    def savePathsToSettings(self):
        self.settings.setValue("save_dir", self.edtSave.text())
        self.settings.setValue("game_dir", self.edtHeroRoot.text())

    # -----------------------
    # –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ UI
    # -----------------------
    def chooseSaveDir(self):
        path = QFileDialog.getExistingDirectory(self, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ZIP")
        if path:
            self.edtSave.setText(path)
            self.savePathsToSettings()

    def chooseFolder(self, edt: QLineEdit):
        d = QFileDialog.getExistingDirectory(self, "–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É Heroes V")
        if d:
            edt.setText(d)
            self.savePathsToSettings()

    # -----------------------
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ZIP
    # -----------------------
    def onDownload(self):
        """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ç–∏—Å–Ω–µ ¬´–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏¬ª: –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ, —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤–æ—Ä–∫–µ—Ä."""
        self.txtLog.clear()
        self.prg.setValue(0)
        self.btnOpenFolder.setVisible(False)

        item_name = self.comboTargets.currentText()
        info = DOWNLOAD_SOURCES.get(item_name, {})
        if not info:
            self.log("‚ùå –ù–µ–º–∞ –¥–∂–µ—Ä–µ–ª–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è: " + item_name)
            return

        save_dir = self.edtSave.text().strip()
        if not save_dir or not os.path.isdir(save_dir):
            self.log("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ç–µ–∫a –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ZIP.")
            return

        zip_path = os.path.join(save_dir, f"{item_name}.zip")
        self.log(f"üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {item_name} ‚Üí {zip_path}")
        src_type = info.get("type")

        # –í–∏–±—ñ—Ä –≤–æ—Ä–∫–µ—Ä–∞ –∑–∞ —Ç–∏–ø–æ–º
        if src_type == "git":
            repo = info["repo"]
            file_in_repo = info["file"]
            self.worker = GitDownloadWorker(repo, file_in_repo, zip_path)
        elif src_type == "gdrive":
            file_id = info["id"]
            self.worker = GDriveDownloadWorker(file_id, zip_path)
        else:
            file_id = info.get("id")
            if file_id:
                url = f"https://drive.google.com/uc?export=download&id={file_id}"
                self.worker = DownloadWorker(url, zip_path)
            else:
                # fallback
                self.log("‚ùå –ù–µ –∑–º–æ–≥–ª–∏ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –¥–∂–µ—Ä–µ–ª–∞.")
                return

        # –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª–∏ –≤–æ—Ä–∫–µ—Ä–∞
        self.worker.progressChanged.connect(self.prg.setValue)
        self.worker.statusMessage.connect(self.txtLog.append)
        self.worker.finishedSignal.connect(self.onDownloadFinished)

        # –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∫–∏ –π–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        self.btnDownload.setEnabled(False)
        self.prg.setValue(0)
        self.worker.start()

        # –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–µ–∫—É
        self.savePathsToSettings()

    def onDownloadFinished(self, msg: str):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è."""
        self.txtLog.append(msg)
        self.btnDownload.setEnabled(True)
        self.prg.setValue(100)
        # –†–æ–±–∏–º–æ –∫–Ω–æ–ø–∫—É ¬´–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É –∑ ZIP¬ª –≤–∏–¥–∏–º–æ—é
        self.btnOpenFolder.setVisible(True)

    # -----------------------
    # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ZIP
    # -----------------------
    def onInstall(self):
        """–ö–æ–ø—ñ—é—î –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ–∞–π–ª–∏ –∑ ZIP (–∑–∞ INSTALL_MAP) —É –ø–∞–ø–∫—É –≥—Ä–∏."""
        choice = self.comboInstall.currentText()  # Universe_mod / H5AI_31 / Maps
        save_dir = self.edtSave.text().strip()
        zip_path = os.path.join(save_dir, f"{choice}.zip")

        if not os.path.isfile(zip_path):
            self.txtLog.append(f"‚ùå ZIP-—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {zip_path}")
            return

        hero_root = self.edtHeroRoot.text().strip()
        if not hero_root or not os.path.isdir(hero_root):
            self.txtLog.append("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ—Ä–µ–Ω–µ–≤–∞ –ø–∞–ø–∫–∞ –≥—Ä–∏")
            return

        mapping = INSTALL_MAP.get(choice, {})
        self.txtLog.append(f"‚öôÔ∏è –Ü–Ω—Å—Ç–∞–ª—è—Ü—ñ—è ¬´{choice}¬ª —É {hero_root}")

        with zipfile.ZipFile(zip_path, "r") as archive:
            for subfolder, files in mapping.items():
                dest = os.path.join(hero_root, subfolder)
                os.makedirs(dest, exist_ok=True)

                for member in archive.namelist():
                    base = os.path.basename(member)
                    # –Ø–∫—â–æ ["*"] ‚Üí –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏
                    if files == ["*"] or base.lower() in [f.lower() for f in files]:
                        tmp = tempfile.mkdtemp()
                        archive.extract(member, tmp)
                        dest_file = os.path.join(dest, base)

                        # –ü–µ—Ä–µ–∑–∞–ø–∏—Ç–∞—Ç–∏, —è–∫—â–æ —ñ—Å–Ω—É—î
                        if os.path.exists(dest_file):
                            reply = QMessageBox.question(
                                self, "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ —Ñ–∞–π–ª?",
                                f"–§–∞–π–ª ¬´{base}¬ª –≤–∂–µ —ñ—Å–Ω—É—î —É {dest}. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏?",
                                QMessageBox.Yes | QMessageBox.No
                            )
                            if reply == QMessageBox.No:
                                shutil.rmtree(tmp)
                                continue
                            os.remove(dest_file)

                        shutil.move(os.path.join(tmp, member), dest)
                        shutil.rmtree(tmp)
                        self.txtLog.append(f"‚úî {base} ‚Üí {dest}")

        self.txtLog.append(f"‚úÖ ¬´{choice}¬ª —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    # -----------------------
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
    # -----------------------
    def openZipFolder(self):
        """–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–∫—É, –¥–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è ZIP-—Ñ–∞–π–ª–∏."""
        path = self.edtSave.text().strip()
        if os.path.isdir(path):
            QDesktopServices.openUrl(QUrl.fromLocalFile(path))
        else:
            self.txtLog.append("‚ùå –¢–µ–∫–∞ –∑ ZIP –Ω–µ —ñ—Å–Ω—É—î.")

    def showFullLogDialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤–Ω–∏–π –ª–æ–≥ —É –Ω–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ (–∫–æ–ø—ñ—è —Ç–µ–∫—Å—Ç—É)."""
        dlg = QDialog(self)
        dlg.setWindowTitle("–ü–æ–≤–Ω–∏–π –ª–æ–≥")
        dlg.resize(600, 400)

        layout = QVBoxLayout(dlg)
        txt = QPlainTextEdit()
        txt.setReadOnly(True)
        txt.setPlainText(self.txtLog.toPlainText())
        layout.addWidget(txt)

        btns = QDialogButtonBox(QDialogButtonBox.Ok)
        btns.accepted.connect(dlg.accept)
        layout.addWidget(btns)

        dlg.exec()

    # -----------------------
    # –î–æ–ø–æ–º—ñ–∂–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    # -----------------------
    def log(self, message: str):
        self.txtLog.append(message)
        print(message)
